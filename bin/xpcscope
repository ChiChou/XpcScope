#!/usr/bin/env python3

import frida

import json
import sys

from pathlib import Path
from typing import Callable

from xpcscope.pcap import Pcap


def main(get_target: Callable[[], frida.core.Session]):
    session = get_target()

    source = Path(__file__).parent.parent / 'src' / 'frida' / '_agent.js'
    try:
        with source.open('r', encoding='utf8') as f:
            script = session.create_script(f.read())
    except FileNotFoundError:
        sys.stderr.write(f'frida agent {source} not found\n')
        return

    pcap = Pcap()

    def on_message(message: dict, data: bytes):
        if message['type'] == 'send':
            metadata = json.dumps(message['payload'])
            joint = metadata.encode('utf8') + data
            ok = pcap.write(joint, len(data))
            if not ok:
                sys.exit(1)
        else:
            sys.stderr.write(f'{message}\n')

    script.on('message', on_message)
    script.load()

    script.exports_sync.start()
    # name, pid = script.exports_sync.name_and_pid()
    # sys.stderr.write(f'attached to {name}({pid})\n')

    try:
        input('Press enter to exit\n')
    except KeyboardInterrupt:
        pass
    finally:
        script.unload()
        session.detach()


if __name__ == '__main__':
    # I am too lazy to parse frida parameters
    # so you can use a script to attach to the target

    if sys.argv == 2:
        loader = sys.argv[1]
    else:
        loader = 'target'

    import os
    # execute get function in loader python script
    sys.path.append(os.path.dirname(loader))
    get_session = getattr(__import__(os.path.basename(loader)), 'get')

    main(get_session)
